class Solution{
  public:
  
    Node *getmid(Node *head){
        int count=0;
        int mid=0;
        Node *temp=head;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        //odd length
        if(count%2){
            mid=(count/2)+1;
        }
        //even length
        else{
           mid=count/2; 
        }
        int i=1;
        temp=head;
        while(i<mid){
            temp=temp->next;
            i++;
        }
        return temp;
    }
    
    //reverse function
    Node *reverse(Node *head){
        Node *curr=head;
        Node *prev=NULL;
        Node *fwd=NULL;
        while(curr!=NULL){
            fwd=curr->next;
            curr->next=prev;
            prev=curr;
            curr=fwd;
        }
        return prev;
    }
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //step1 find the middle element
        Node *mid=getmid(head);
        Node *temp=mid->next;
        //reverse half linked list
        mid->next=reverse(temp);
        Node *head1=head;
        Node *head2=mid->next;
        //check palindrome
        while(head2!=NULL){
            if(head1->data!=head2->data){
                return 0;
            }
            head1=head1->next;
            head2=head2->next;
        }
        temp=mid->next;
        mid->next=reverse(temp);
        return 1;
    }
};
